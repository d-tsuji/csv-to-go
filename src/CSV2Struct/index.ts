import { parse } from "papaparse";

type column = {
	fieldName: string;
	fieldType: string;
}

export const CSV2Struct = (csvText: string): string => {
	if (!csvText) {
		console.log('input is null')
		return ''
	}

	const res = parse(csvText, {
		dynamicTyping: true,
	});

	if (res.errors.length > 0) {
		return `CSV Parse error.`
	}

	// The first line is for a CSV field.
	const columnRow = res.data[0] as object
	const columnCount = Object.keys(columnRow).length
	let columns: column[] = new Array(columnCount)

	Object.values(columnRow).map((field, i) => {
		columns[i] = { fieldName: field as string, fieldType: '' }
	})

	res.data.map((r, i) => {
		if (i === 0) return

		Object.values(r as object).map((v, j) => {
			const typ = goType(v)

			if (!columns[j].fieldType) {
				columns[j].fieldType = typ
				return
			}

			if (typ === columns[j].fieldType) {
				return
			}

			columns[j].fieldType = 'interface{}'
		})
	})

	// Completion of missing values
	for (let v of columns) {
		if (v.fieldType === '') { v.fieldType = 'interface{}' }
	}

	let output: string = ''
	output = output.concat('type AutoGenerated sturct {\n')

	for (const value of columns) {
		const x = value.fieldName
		output = output.concat(`\t${x.charAt(0).toUpperCase() + x.substring(1)} ${value.fieldType} \`csv:"${value.fieldName}"\``)
		output = output.concat('\n')
	}

	output = output.concat('}')

	return output
}


// https://github.com/mholt/json-to-go/blob/master/json-to-go.js
const goType = (val: any): string => {
	if (val === null)
		return 'interface{}';

	switch (typeof val) {
		case 'string':
			if (/\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(\+\d\d:\d\d|Z)/.test(val))
				return 'time.Time';
			else
				return 'string';
		case 'number':
			if (val % 1 === 0) {
				if (val > -2147483648 && val < 2147483647)
					return 'int';
				else
					return 'int64';
			}
			else
				return 'float64';
		case 'boolean':
			return 'bool';
		case 'object':
			if (Array.isArray(val))
				return 'slice';
			return 'struct';
		default:
			return 'interface{}';
	}
}
